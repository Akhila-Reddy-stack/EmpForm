{"version":3,"sources":["Components/Forms/Input.jsx","Services/httpService.js","Services/Empservice.js","Components/Forms/custom-select.jsx","Pages/EmpForm.jsx","Pages/EmpList.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","asField","fieldState","fieldApi","props","setValue","value","setTouched","field","onChange","onBlur","forwardedRef","initialValue","content","className","rest","label","htmlFor","style","fontWeight","fontSize","color","id","ref","classnames","error","e","target","helper","axios","interceptors","response","use","status","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","Empregistration","data","apiEndPoint","apiUrl","console","log","http","EmpList","CustomSelect","excludeEmptyOption","emptyValue","emptyLabel","options","placeholder","getOptionValue","getOptionLabel","radioInline","map","option","i","key","variant","anchorOrigin","vertical","horizontal","autoHideDuration","Eoptions","EmpForm","componentDidMount","setFormApi","formApi","handleChange","a","currentTarget","name","state","setState","handleType","gender","onSubmit","EmpName","Age","Gender","MobileNumber","res","enqueueSnackbar","setTimeout","this","class","getApi","formState","type","required","Button","PureComponent","withSnackbar","SearchBar","Search","EmployeeList","initTableData","loading","bind","d","hideColumns","columnHeaders","getColumnHeaders","prefixUrl","columns","getColumns","isTableLoading","notificationDOMRef","React","createRef","allKeys","excludeKeys","keys","_","filter","v","includes","def","Sno","dataField","text","sort","inventryList","Container","Row","Col","md","textAlign","marginTop","paddingLeft","Breadcrumb","BreadcrumbItem","active","keyField","search","sm","searchProps","baseProps","bootstrap4","pagination","paginationFactory","striped","hover","condensed","classes","wrapperClasses","noDataIndication","columnsHeaders","forEach","push","hidden","App","width","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","maxSnack","preventDuplicate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f0e0348.chunk.js","sourcesContent":["import classnames from 'classnames';\r\nimport { asField } from 'informed';\r\nimport React, { Fragment } from 'react';\r\n\r\nexport const Input = asField(({ fieldState, fieldApi, ...props }) => {\r\n\tconst { value } = fieldState;\r\n\tconst { setValue, setTouched } = fieldApi;\r\n\tconst { field, onChange, onBlur, initialValue, forwardedRef, className, content, ...rest } = props;\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t   <div className=\"form-group\">\r\n\t\t\t\t{props.label && (\r\n\t\t\t\t\t<label htmlFor={field} style={{ fontWeight: '600', fontSize: '16px', color: '#07509d' }}>\r\n\t\t\t\t\t\t{props.label}\r\n\t\t\t\t\t</label>\r\n\t\t\t\t)}\r\n<div>\r\n<input\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tid={field}\r\n\t\t\t\t\tref={forwardedRef}\r\n\t\t\t\t\t// value={!value && value !== 0 ? '' : value}\r\n\t\t\t\t\tclassName={classnames(\"form-control\", { \"is-invalid\": fieldState.error })}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tsetValue(e.target.value);\r\n\t\t\t\t\t\tif (onChange) {\r\n\t\t\t\t\t\t\tonChange(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonBlur={(e) => {\r\n\t\t\t\t\t\tsetTouched(true);\r\n\t\t\t\t\t\tif (onBlur) {\r\n\t\t\t\t\t\t\tonBlur(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n</div>\r\n\t\t\t\t\r\n\t\t\t\t{props.helper && <small className=\"form-text text-muted\">{content}</small>}\r\n\t\t\t\t{fieldState.error ? <div className=\"invalid-field\">{fieldState.error}</div> : null}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n});\r\n","import axios from \"axios\";  \r\n\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    // window.location.href = \"/Error\"\r\n    // toast.error(\"An unexpected error occurrred.\");\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nfunction setJwt(jwt) { \r\n  axios.defaults.headers.common[\"x-auth-token\"] = \"Bearer \" + jwt;\r\n  axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + jwt;\r\n}\r\n\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJwt, \r\n};","import http from './httpService';\r\nimport { apiUrl } from \"../config.json\";\r\n\r\nexport function Empregistration(data) {\r\n    const apiEndPoint = `${apiUrl}/empregistration`;\r\n    console.log(apiEndPoint)\r\n    return http.post(`${apiEndPoint}`, data);\r\n}\r\n\r\nexport const EmpList = () => {\r\n    const apiEndPoint = `${apiUrl}/empList`;\r\n    console.log(apiEndPoint)\r\n    return http.get(`${apiEndPoint}`);\r\n  }","import { asField, Option } from 'informed';\r\nimport React, { Fragment } from 'react';\r\nimport Select from 'react-select';\r\nexport const CustomSelect = asField(({ fieldState, fieldApi, ...props }) => {\r\n    const { value } = fieldState;\r\n\r\n    const {  setTouched } = fieldApi;\r\n    const { field, onChange, onBlur, initialValue, forwardedRef,\r\n        excludeEmptyOption, emptyValue, emptyLabel,placeholder,\r\n        options, getOptionValue, getOptionLabel, radioInline, ...rest } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"form-group\">\r\n                {props.label && <label htmlFor={field}>{props.label}</label>}\r\n                <div>\r\n                    <Select\r\n                        {...rest}\r\n                        \r\n                        id={field}\r\n                        field={field}\r\n                        value={value}\r\n                        options={options}\r\n                        getOptionLabel={getOptionLabel}\r\n                        // className=\"custom-select custom-select-sm\"\r\n                        onChange={e => {\r\n                            // setValue(e.target.value);\r\n                           \r\n                            if (onChange) {\r\n                                onChange(e, value);\r\n                            }\r\n                        }}\r\n                        onBlur={e => {\r\n                            setTouched();\r\n                            if (onBlur) {\r\n                                onBlur(e);\r\n                            }\r\n                        }}\r\n                    >\r\n                        {!excludeEmptyOption &&\r\n                            <Option value={emptyValue ? emptyValue : \"\"} className=\"custom-control-input\">{emptyLabel ? emptyLabel : 'Select the option'}</Option>\r\n                            // <Option value={emptyValue ? emptyValue : \"\"} className=\"custom-control-input\">{placeholder}</Option>\r\n                        }\r\n                        {options && options.map((option, i) =>\r\n                            <Option value={getOptionValue ? getOptionValue(option) : (option.value ? option.value : option)} id={`${field}-${i}`} className=\"custom-control-input\" key={i}>{getOptionLabel ? getOptionLabel(option) : (option.label ? option.label : option)}</Option>\r\n                        )}\r\n                    </Select>\r\n                </div>\r\n                {fieldState.error ? (<div className=\"invalid-field\">{fieldState.error}</div>) : null}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n});\r\n","\r\n\r\nimport { Input } from '../Components/Forms/Input';\r\nimport { Form } from 'informed';\r\nimport { withSnackbar } from 'notistack';\r\nimport React, { Fragment, PureComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, FormGroup } from 'reactstrap';\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport { Empregistration } from '../Services/Empservice'\r\nimport { CustomSelect } from '../Components/Forms/custom-select'\r\n\r\nconst options = {\r\n    variant: \"success\",\r\n    anchorOrigin: {\r\n        vertical: \"top\",\r\n        horizontal: \"center\",\r\n        autoHideDuration: 500,\r\n    },\r\n};\r\n\r\nconst Eoptions = {\r\n    variant: \"warning\",\r\n    anchorOrigin: {\r\n        vertical: \"top\",\r\n        horizontal: \"center\",\r\n        autoHideDuration: 500,\r\n    },\r\n};\r\nclass EmpForm extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n            Gender: [{ value: \"M\", label: \"Male\" }, { value: \"F\", label: \"Female\" }],\r\n            gender:''\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n    }\r\n\r\n    setFormApi = (formApi) => {\r\n        this.formApi = formApi;\r\n    }\r\n\r\n    handleChange = async ({ currentTarget: Input }) => {\r\n        const { id: name, value } = Input;\r\n        const { data } = this.state;\r\n        data[name] = value;\r\n        await this.setState({ data })\r\n        console.log(this.state)\r\n    }\r\n    handleType = async(e) => {\r\n        console.log(e)\r\n        if(e.value === \"M\"){\r\n            await this.setState({ gender: \"Male\" }) \r\n        }\r\n        if(e.value === \"F\"){\r\n            await this.setState({ gender: \"Female\" }) \r\n        }\r\n   \r\n        console.log(this.state.value)\r\n    }\r\n    onSubmit = async () => {\r\n        // const data = [];\r\n        const { data, EmpName, Age, gender, Gender } = this.state;\r\n        data[\"EmpName\"] = data.EmpName\r\n        data[\"Age\"] = data.Age\r\n        data[\"Gender\"] = gender\r\n        data[\"MobileNumber\"] = data.MobileNumber\r\n        console.log(data)\r\n        if (data.EmpName && data.Age && gender && data.MobileNumber) {\r\n            const res = await Empregistration(data);\r\n            console.log(res)\r\n            if (res.data.status === true) {\r\n                this.props.enqueueSnackbar(\"Success !\", options, 500);\r\n\r\n            } else {\r\n                this.props.enqueueSnackbar(\"Sorry Failed!!\", Eoptions, 500);\r\n\r\n            }\r\n            await this.setState({\r\n                data: {}\r\n            })\r\n            setTimeout(`location.href = '/registration';`);\r\n        }\r\n        else if (!data.EmpName && !data.Age && !gender && !data.MobileNumber) {\r\n            this.props.enqueueSnackbar(\"Please Fill all details!!\", Eoptions, 500);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { Gender } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <div class=\"login-form\">\r\n\r\n                    <div className=\"empform\">\r\n\r\n\r\n                        <div className=\"text-center emp-header\">Employee Form</div>\r\n\r\n                        <div>  <Form getApi={this.setFormApi} onSubmit={this.onSubmit}>\r\n                            {({ formApi, formState }) => (\r\n                                <div>\r\n                                    <Input field=\"EmpName\" label=\"Employee Name\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n\r\n                                    <Input field=\"Age\" type=\"number\" label=\"Age\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n\r\n                                    <label className=\"hintparagraph\">Gender<span ></span></label>\r\n                                    <CustomSelect field=\"Gender\" name=\"Gender\" getOptionValue={option => option.value}\r\n                                        getOptionLabel={option => option.label}\r\n                                        options={Gender}\r\n                                        onChange={e => this.handleType(e)}\r\n                                        required\r\n                                    />\r\n\r\n                                    <Input field=\"MobileNumber\" type=\"number\" label=\"Mobile number\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                    <div> <Button type=\"submit\" className=\"onsubmit-btn\" value=\"Submit\"  >\r\n                                        Submit</Button></div>\r\n\r\n                                </div>\r\n                            )}\r\n                        </Form> </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withSnackbar(EmpForm);\r\n\r\n\r\n\r\n","import React, { Fragment, PureComponent } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport * as InoIcons from \"react-icons/io\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Container,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n} from \"reactstrap\";\r\nimport { EmpList } from '../Services/Empservice';\r\n\r\n\r\nconst { SearchBar } = Search;\r\n\r\nconst options = {\r\n  variant: \"success\",\r\n  anchorOrigin: {\r\n    marginTop: \"4rem\",\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n  },\r\n};\r\nconst Eoptions = {\r\n  variant: \"warning\",\r\n  anchorOrigin: {\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n    autoHideDuration: 5000,\r\n  },\r\n};\r\n\r\nclass EmployeeList extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      isTableLoading: true,\r\n      loading:true,\r\n      EmpList:[]\r\n    };\r\n    this.notificationDOMRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n  \r\n    await this.EmpList();\r\n    await this.initTableData();\r\n    setTimeout(\r\n      function () {\r\n        this.setState({ loading: false })\r\n      }.bind(this),\r\n      600\r\n    )\r\n  };\r\n\r\n  EmpList = async () => {\r\n    console.log(\"oooo\");\r\n    let res = await EmpList();\r\n    console.log(res);\r\n    if (res.data.status === true) {\r\n      await this.setState({\r\n        EmpList: res.data.data,\r\n      });\r\n    \r\n      res.data.data.map((d, i) => {\r\n        d[\"Sno\"] = i + 1;\r\n      });\r\n    }\r\n    console.log(this.state)\r\n    await this.initTableData();\r\n  };\r\n\r\n \r\n  initTableData = async () => {\r\n    const { hideColumns } = this.state;\r\n    const columnHeaders = this.getColumnHeaders(this.props.prefixUrl);\r\n    const columns = getColumns(columnHeaders, hideColumns);\r\n    await this.setState({ columns, columnHeaders, hideColumns });\r\n  };\r\n\r\n  getColumnHeaders(prefixUrl = \"\") {\r\n    //dynamic headers\r\n    let allKeys = [\r\n      \"Sno\",\r\n      \"EmpName\",\r\n      \"Age\",\r\n      \"Gender\",\r\n      \"MobileNumber\",\r\n     \r\n    ];\r\n    let excludeKeys = [];\r\n    let keys = _.filter(allKeys, (v) => !_.includes(excludeKeys, v));\r\n    let def = {\r\n      Sno: { dataField: \"Sno\", text: \"Sl.No\", sort: true },\r\n      EmpName: { dataField: \"EmpName\", text: \"Employee Name\", sort: true },\r\n      Age: {\r\n        dataField: \"Age\",\r\n        text: \"Age\",\r\n        sort: true,\r\n      },\r\n      Gender: {\r\n        dataField: \"Gender\",\r\n        text: \"Gender\", sort: true\r\n      },\r\n      MobileNumber: { dataField: \"MobileNumber\", text: \"Mobile Number\", sort: true }\r\n\r\n    };\r\n    return { keys:keys ,def: def };\r\n  }\r\n\r\n  render() {\r\n    const { EmpList, data, columns, inventryList } = this.state;\r\n    console.log(this.state);\r\n    return (\r\n      <Fragment>\r\n        <Container>\r\n       \r\n          <Row>\r\n            <Col\r\n              md={12}\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginTop: \"14px\",\r\n                paddingLeft: \"19px\",\r\n              }}\r\n            >\r\n              <Breadcrumb>\r\n            \r\n                <BreadcrumbItem active>Employee List</BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            <Col md={12}>\r\n              <div class=\"card\">\r\n                <div\r\n                  className=\"table-div1\"\r\n                  id=\"tablepaddingnew\"\r\n                >\r\n                  {EmpList && columns && (\r\n                    <ToolkitProvider\r\n                      keyField=\"id\"\r\n                      data={EmpList}\r\n                      columns={columns}\r\n                      search\r\n                    >\r\n                      {(props) => (\r\n                        <div>\r\n                          <Row className=\"addrowpadding\">\r\n                            <Col sm={10}>\r\n                              <div className=\"d-flex justify-content-end\">\r\n                               \r\n                              </div>\r\n                            </Col>\r\n                            <Col sm={2} className=\"search-btn\">\r\n                              <SearchBar {...props.searchProps} />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <div className=\" table-div1\">\r\n                                <BootstrapTable\r\n                                  keyField=\"\"\r\n                                  data={EmpList}\r\n                                  columns={columns}\r\n                                  {...props.baseProps}\r\n                                  bootstrap4\r\n                                  pagination={paginationFactory()}\r\n                                  striped\r\n                                  hover\r\n                                  condensed\r\n                                  classes=\"table table-bordered table-hover table-sm\"\r\n                                  wrapperClasses=\"table-responsive\"\r\n                                  \r\n                                  noDataIndication={\"No data to display here\"}\r\n                                />\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                        </div>\r\n                      )}\r\n                    </ToolkitProvider>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        {/* } */}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withSnackbar(EmployeeList);\r\n\r\nfunction getColumns(columnsHeaders, hideColumns) {\r\n  let columns = [];\r\n  const { keys, def } = columnsHeaders;\r\n\r\n  _.forEach(keys, (key) => {\r\n    columns.push({ ...def[key], hidden: _.includes(hideColumns, key) });\r\n  });\r\n  return columns;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport './styles/emp.scss'\r\nimport './styles/table.scss'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport EmpForm from \"./Pages/EmpForm\";\r\nimport EmployeeList from \"./Pages/EmpList\";\r\n\r\n\r\nfunction App(props) {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <div className=\"wrapper\" style={{ width: \"100%\" }}>\r\n          <Switch>\r\n            <Route path=\"/registration\" component={EmpForm} />\r\n            <Route path=\"/empList\" component={EmployeeList} />\r\n            <Redirect to=\"/registration\" component={EmpForm}></Redirect>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SnackbarProvider \r\n     maxSnack={1} preventDuplicate  > \r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n    </SnackbarProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// render(<SnackbarProvider \r\n//   maxSnack={1} preventDuplicate  ><App /></SnackbarProvider>, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}